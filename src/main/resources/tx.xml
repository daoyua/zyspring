<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!--配置server-->
    <bean id="accountServer" class="com.springtest.zy.spring.tx.AccountServerImp">
        <property name="accountDao" ref="accountDao"></property>
    </bean>
    <!--配置dao-->
    <bean name="accountDao" class="com.springtest.zy.spring.tx.AccountDaoImp">
        <!--
        dao继承了JdbcDaoSupport后会自动创建jdbcTemplate，只要注入dataSource
        <property name="jdbcTemplate" ref="jdbcTemplete"></property>
         <bean id="jdbcTemplete" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
        -->
<property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 第二种方式通过context标签引入的 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>


</beans>