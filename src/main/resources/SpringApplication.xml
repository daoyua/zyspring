<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
      xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
<!-- init-method="haha" -->
    <bean  id="user" class="com.springtest.zy.spring.UserImpement" scope="prototype" destroy-method="toString">
    <!--<constructor-arg name="name" value="aaaaaaaa"/>-->
    <constructor-arg index="0" value="#{'ssfsefs'}"/>
    <constructor-arg index="1" value="#{33}"/>
</bean>
    <!--<bean  name="user1" class="com.springtest.zy.spring.UserImpement1" init-method="haha" scope="prototype">-->
      <!--<property name="age" value="12"></property>-->
        <!--<property name="name" value="sss"></property>-->
        <!--<property name="userImpement" ref="user"></property>-->
    <!--</bean>-->
    <bean  name="user1" class="com.springtest.zy.spring.UserImpement1"  scope="prototype"
    p:age="12" p:name="aaa" p:userImpement="#{user}">
    <!--p:age="12" p:name="aaa" p:userImpement-ref="user">-->

    </bean>
    <bean name="zengqiang" class="com.springtest.zy.spring.AopZengqiang"></bean>
    <bean name="aopTest" class="com.springtest.zy.spring.AopTest"></bean>
    <bean name="aopTest2" class="com.springtest.zy.spring.AopTest2"></bean>
    <!--开启spirng的ioc的注解扫描
    ：除了具有上面的功能之外，还具有自动将带有@component,@service,@Repository等注解的对象注册到spring容器中的功能
    -->
<context:component-scan base-package="com.springtest.zy"/>
<!--类上没有加注解的情况,可以使用属性注解@ Resource 、@ PostConstruct、@Antowired
仅能够在已经在已经注册过的bean上面起作用。对于没有在spring容器中注册的bean，它并不能执行任何操作
-->
    <!--<context:annotation-config></context:annotation-config>-->

    <!--aop的xml配置*******************************************************************************8-->

    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

    <aop:config proxy-target-class="true">
        <!--表达式配置增强-->
        <aop:pointcut id="aopt1" expression="execution(* com.springtest.zy.spring.AopTest.haha(..))"/>
        <aop:pointcut id="aopt2" expression="execution(* com.springtest.zy.spring.AopTest2.haha(..))"/>
        <aop:pointcut id="aopt3" expression="execution(* com.springtest.zy.spring.AopTest2.huanrao(..))"/>
        <aop:pointcut id="aopt4" expression="execution(* com.springtest.zy.spring.AopTest2.yichangtest(..))"/>
        <!--* *.com.springtest.zy.spring..*.*(..) 所有类的所有方法-->
        <!--配置切面-->
        <aop:aspect ref="zengqiang" >
            <!--前置通知-->
            <!--<aop:before method="checkpri" pointcut-ref="aopt1"></aop:before>-->
<aop:before method="checkpri" pointcut-ref="aopt1" arg-names="joinpoint"></aop:before>
            <aop:after-returning method="wrigtLog" pointcut-ref="aopt2" returning="result"></aop:after-returning>
            <aop:around method="around" pointcut-ref="aopt3" ></aop:around>
            <aop:after-throwing method="afterThrowing" pointcut-ref="aopt4" throwing="ex"></aop:after-throwing>
            <aop:after method="finalmethod" pointcut-ref="aopt4"></aop:after>

        </aop:aspect>
    </aop:config>

    <!--**********************jdbc********************************************************************************
      driverManagerDataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
        driverManagerDataSource.setUrl("jdbc:mysql://localhost:3306/test?serverTimezone=UTC");
        driverManagerDataSource.setUsername("root");
        driverManagerDataSource.setPassword("zhouyang");
   -->
    <!-- 引入属性文件================================== -->
    <!-- 第一种方式通过一个bean标签引入的（很少） -->
    <!-- 	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <property name="location" value="classpath:jdbc.properties"/>
        </bean> -->

    <!-- 第二种方式通过context标签引入的 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 配置C3P0连接池=============================== -->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
        <!--<property name="driverClass" value="${jdbc.driverClass}"/>-->
        <!--<property name="jdbcUrl" value="${jdbc.url}"/>-->
        <!--<property name="user" value="${jdbc.username}"/>-->
        <!--<property name="password" value="${jdbc.password}"/>-->
    <!--</bean>-->
    <!-- 配置DBCP连接池=============================== -->
    <!-- 	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
            <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
            <property name="url" value="jdbc:mysql:///spring4_day03"/>
            <property name="username" value="root"/>
            <property name="password" value="abc"/>
        </bean> -->
    <!--默认的连接池-->
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driverClassName}"></property>
    <property name="url" value="${jdbc.url}"></property>
    <property name="username" value="${jdbc.username}"></property>
    <property name="password" value="${jdbc.password}"></property>
</bean>

    <bean id="jdbcTemplete" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
</beans>